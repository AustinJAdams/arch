{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Unit Root Testing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_This setup code is required to run in an IPython notebook_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.simplefilter('ignore')\n",
    "\n",
    "%matplotlib inline\n",
    "import seaborn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "seaborn.mpl.rcParams['figure.figsize'] = (10.0, 6.0)\n",
    "seaborn.mpl.rcParams['savefig.dpi'] = 90\n",
    "seaborn.mpl.rcParams['font.family'] = 'serif'\n",
    "seaborn.mpl.rcParams['font.size'] = 14"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Most examples will make use of the Default premium, which is the difference between the yields of BAA and AAA rated corporate bonds. The data is downloaded from FRED using pandas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import datetime as dt\n",
    "import pandas as pd\n",
    "import statsmodels.api as sm\n",
    "import pandas_datareader.data as web\n",
    "aaa = web.DataReader(\"AAA\", \"fred\", dt.datetime(1919,1,1), dt.datetime(2014,1,1))\n",
    "baa = web.DataReader(\"BAA\", \"fred\", dt.datetime(1919,1,1), dt.datetime(2014,1,1))\n",
    "baa.columns = aaa.columns = ['default']\n",
    "default = baa - aaa\n",
    "fig = default.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Default premium is clearly highly persistent.  A simple check of the autocorrelations confirms this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "acf = pd.DataFrame(sm.tsa.stattools.acf(default), columns=['ACF'])\n",
    "fig = acf[1:].plot(kind='bar', title='Autocorrelations')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Augmented Dickey-Fuller Testing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Augmented Dickey-Fuller test is the most common unit root test used.  It is a regression of the first difference of the variable  on its lagged level as well as additional lags of the first difference.  The null is that the series contains a unit root, and the (one-sided) alternative is that the series is stationary. \n",
    "\n",
    "By default, the number of lags is selected by minimizing the AIC across a range of lag lengths (which can be set using `max_lag` when initializing the model).  Additionally, the basic test includes a constant in the ADF regression.\n",
    "\n",
    "These results indicate that the Default premium is stationary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Augmented Dickey-Fuller Results   \n",
      "=====================================\n",
      "Test Statistic                 -3.241\n",
      "P-value                         0.018\n",
      "Lags                               21\n",
      "-------------------------------------\n",
      "\n",
      "Trend: Constant\n",
      "Critical Values: -3.44 (1%), -2.86 (5%), -2.57 (10%)\n",
      "Null Hypothesis: The process contains a unit root.\n",
      "Alternative Hypothesis: The process is weakly stationary.\n"
     ]
    }
   ],
   "source": [
    "from arch.unitroot import ADF\n",
    "adf = ADF(default)\n",
    "print(adf.summary().as_text())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The number of lags can be directly set using `lags`.  Changing the number of lags makes no difference to the conclusion.\n",
    "\n",
    "**Note**: The ADF assumes residuals are white noise, and that the number of lags is sufficient to pick up any dependence in the data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setting the number of lags"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Augmented Dickey-Fuller Results   \n",
      "=====================================\n",
      "Test Statistic                 -3.427\n",
      "P-value                         0.010\n",
      "Lags                                5\n",
      "-------------------------------------\n",
      "\n",
      "Trend: Constant\n",
      "Critical Values: -3.44 (1%), -2.86 (5%), -2.57 (10%)\n",
      "Null Hypothesis: The process contains a unit root.\n",
      "Alternative Hypothesis: The process is weakly stationary.\n"
     ]
    }
   ],
   "source": [
    "adf.lags = 5\n",
    "print(adf.summary().as_text())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Deterministic terms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The deterministic terms can be altered using `trend`.  The options are:\n",
    "\n",
    "* `'nc'` : No deterministic terms\n",
    "* `'c'` : Constant only\n",
    "* `'ct'` : Constant and time trend\n",
    "* `'ctt'` : Constant, time trend and time-trend squared\n",
    "\n",
    "Changing the type of constant also makes no difference for this data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Augmented Dickey-Fuller Results   \n",
      "=====================================\n",
      "Test Statistic                 -3.661\n",
      "P-value                         0.025\n",
      "Lags                                5\n",
      "-------------------------------------\n",
      "\n",
      "Trend: Constant and Linear Time Trend\n",
      "Critical Values: -3.97 (1%), -3.41 (5%), -3.13 (10%)\n",
      "Null Hypothesis: The process contains a unit root.\n",
      "Alternative Hypothesis: The process is weakly stationary.\n"
     ]
    }
   ],
   "source": [
    "adf.trend = 'ct'\n",
    "print(adf.summary().as_text())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Regression output"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The ADF uses a standard regression when computing results.  These can be accesses using `regression`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.095\n",
      "Model:                            OLS   Adj. R-squared:                  0.090\n",
      "Method:                 Least Squares   F-statistic:                     17.00\n",
      "Date:                Thu, 27 Sep 2018   Prob (F-statistic):           1.84e-21\n",
      "Time:                        15:31:57   Log-Likelihood:                 575.20\n",
      "No. Observations:                1135   AIC:                            -1134.\n",
      "Df Residuals:                    1127   BIC:                            -1094.\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Level.L1      -0.0246      0.007     -3.661      0.000      -0.038      -0.011\n",
      "Diff.L1        0.2190      0.030      7.344      0.000       0.160       0.277\n",
      "Diff.L2       -0.0549      0.030     -1.802      0.072      -0.115       0.005\n",
      "Diff.L3       -0.1398      0.030     -4.649      0.000      -0.199      -0.081\n",
      "Diff.L4       -0.0519      0.030     -1.716      0.086      -0.111       0.007\n",
      "Diff.L5        0.0426      0.030      1.431      0.153      -0.016       0.101\n",
      "const          0.0389      0.014      2.796      0.005       0.012       0.066\n",
      "trend      -1.817e-05   1.41e-05     -1.285      0.199   -4.59e-05    9.58e-06\n",
      "==============================================================================\n",
      "Omnibus:                      623.301   Durbin-Watson:                   2.001\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           128496.439\n",
      "Skew:                          -1.393   Prob(JB):                         0.00\n",
      "Kurtosis:                      55.051   Cond. No.                     5.30e+03\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 5.3e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "reg_res = adf.regression\n",
    "print(reg_res.summary().as_text())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "resids = pd.DataFrame(reg_res.resid)\n",
    "resids.index = default.index[6:]\n",
    "resids.columns=['resids']\n",
    "fig = resids.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since the number lags was directly set, it is good to check whether the residuals appear to be white noise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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17tr65tTK2Pbkubaso5tyj6u1+/nS7Mvqfp59n1H5lMNktihUeackvZVwHdLHa4ur6cAG471993JaTSnvmcISZIkqWW8tSpJktRSBnKSJEktZSAnSZLUUgZykiRJLWUgJ0mS1FLj4j87rLPOOjlt2rSxroYkSdKgrrzyynsys9+/putkXARy06ZNY968eWNdDUmSpEFFxJ+GmtZbq5IkSS1lICdJktRSBnKSJEktZSAnSZLUUgZykiRJLTUuRq1KkqTRs2TJEu655x4WLlzI4sWLx7o6rTN58mQ22mgjJk6cOOKyDOQkSdJSuf3224kIpk2bxsSJE4mIsa5Sa2Qmf/vb37j99tvZZJNNRlyet1YlSdJSWbRoERtuuCGrrLKKQdxSigjWXnttHn744VEpz0BOkiQttZVWMoQYrtEMfv0UJEmSWspATpIkqaUc7CBJkkbFtEN+skzXd+tRu4wo/4477siiRYu49NJL+y1bvHgxX/va1zjttNNYZZVVWLx4MUuWLGHnnXdmr7324tnPfjZz5szh6KOP5le/+hVbbrkla6655pPKuPzyy0etL9xADOTUKt1OEiP9QkuSxo+77rqLiy66iEcffZRbbrnlSSNIM5M3v/nN3H///Zx11lmstdZaAPzmN79h5513Zt68efzwhz9kjz324MUvfjGbbLIJs2bNYsaMGU9ax7Rp03q+Hd5alSRJ4853vvMdPvjBD7LSSitx6qmnPmnZ8ccfz09/+lNmz579eBAHsOWWW3LMMccMeR2nnHLKqNV3IAZykiRp3Dn99NM58MAD2X777Zk9e/aTlh133HFsv/32rLfeev3yveENb+Dggw/uWvbcuXPZd999efWrXz2qde7EQE6SJI0rN954I6uvvjpPe9rT2Hvvvbnhhhu46qqrgOoZeddddx3Pf/7zO+adOnUq22233bKsblf2kZMkSePK7Nmz2XvvvQF44xvfyP7778/s2bN5yUtewsKFCwFYddVVl6rMgw466PHBDgsXLmSrrbYa3UoPwBY5SZI0rsyZM4c99tgDgDXWWIOZM2dy2mmnsWTJkseDsUWLFi1VmbNmzWLu3LnMnTuXWbNmjXqdB2KLnCRJGjd+/etfs2DBAnbbbbfH591zzz0sWLCACy+8kB122IEtttiCG264YdjrmDFjRr8RrL1ii5wkSRo3Zs+ezUknnfR4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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "acf = pd.DataFrame(sm.tsa.stattools.acf(reg_res.resid), columns=['ACF'])\n",
    "fig = acf[1:].plot(kind='bar', title='Residual Autocorrelations')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dickey-Fuller GLS Testing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Dickey-Fuller GLS test is an improved version of the ADF which uses a GLS-detrending regression before running an ADF regression with no additional deterministic terms.  This test is only available with a constant or constant and time trend (`trend='c'` or  `trend='ct'`).\n",
    "\n",
    "The results of this test agree with the ADF results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Dickey-Fuller GLS Results      \n",
      "=====================================\n",
      "Test Statistic                 -2.252\n",
      "P-value                         0.024\n",
      "Lags                               21\n",
      "-------------------------------------\n",
      "\n",
      "Trend: Constant\n",
      "Critical Values: -2.59 (1%), -1.96 (5%), -1.64 (10%)\n",
      "Null Hypothesis: The process contains a unit root.\n",
      "Alternative Hypothesis: The process is weakly stationary.\n"
     ]
    }
   ],
   "source": [
    "from arch.unitroot import DFGLS\n",
    "dfgls = DFGLS(default)\n",
    "print(dfgls.summary().as_text())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The trend can be altered using `trend`.  The conclusion is the same. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Dickey-Fuller GLS Results      \n",
      "=====================================\n",
      "Test Statistic                 -3.406\n",
      "P-value                         0.010\n",
      "Lags                               21\n",
      "-------------------------------------\n",
      "\n",
      "Trend: Constant and Linear Time Trend\n",
      "Critical Values: -3.43 (1%), -2.86 (5%), -2.58 (10%)\n",
      "Null Hypothesis: The process contains a unit root.\n",
      "Alternative Hypothesis: The process is weakly stationary.\n"
     ]
    }
   ],
   "source": [
    "dfgls.trend = 'ct'\n",
    "print(dfgls.summary().as_text())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phillips-Perron Testing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Phillips-Perron test is similar to the ADF except that the regression run does not include lagged values of the first differences.  Instead, the PP test fixed the t-statistic using a long run variance estimation, implemented using a Newey-West covariance estimator.  \n",
    "\n",
    "By default, the number of lags is automatically set, although this can be overridden using `lags`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Phillips-Perron Test (Z-tau)    \n",
      "=====================================\n",
      "Test Statistic                 -3.761\n",
      "P-value                         0.003\n",
      "Lags                               23\n",
      "-------------------------------------\n",
      "\n",
      "Trend: Constant\n",
      "Critical Values: -3.44 (1%), -2.86 (5%), -2.57 (10%)\n",
      "Null Hypothesis: The process contains a unit root.\n",
      "Alternative Hypothesis: The process is weakly stationary.\n"
     ]
    }
   ],
   "source": [
    "from arch.unitroot import PhillipsPerron\n",
    "pp = PhillipsPerron(default)\n",
    "print(pp.summary().as_text())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is important that the number of lags is sufficient to pick up any dependence in the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Phillips-Perron Test (Z-tau)    \n",
      "=====================================\n",
      "Test Statistic                 -3.876\n",
      "P-value                         0.002\n",
      "Lags                               12\n",
      "-------------------------------------\n",
      "\n",
      "Trend: Constant\n",
      "Critical Values: -3.44 (1%), -2.86 (5%), -2.57 (10%)\n",
      "Null Hypothesis: The process contains a unit root.\n",
      "Alternative Hypothesis: The process is weakly stationary.\n"
     ]
    }
   ],
   "source": [
    "pp.lags = 12\n",
    "print(pp.summary().as_text())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The trend can be changed as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Phillips-Perron Test (Z-tau)    \n",
      "=====================================\n",
      "Test Statistic                 -4.142\n",
      "P-value                         0.005\n",
      "Lags                               12\n",
      "-------------------------------------\n",
      "\n",
      "Trend: Constant and Linear Time Trend\n",
      "Critical Values: -3.97 (1%), -3.41 (5%), -3.13 (10%)\n",
      "Null Hypothesis: The process contains a unit root.\n",
      "Alternative Hypothesis: The process is weakly stationary.\n"
     ]
    }
   ],
   "source": [
    "pp.trend = 'ct'\n",
    "print(pp.summary().as_text())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, the PP testing framework includes two types of tests. One which uses an ADF-type regression of the first difference on the level, the other which regresses the level on the level.  The default is the `tau` test, which is similar to an ADF regression, although this can be changed using `test_type='rho'`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Phillips-Perron Test (Z-rho)    \n",
      "=====================================\n",
      "Test Statistic                -33.974\n",
      "P-value                         0.000\n",
      "Lags                               12\n",
      "-------------------------------------\n",
      "\n",
      "Trend: Constant and Linear Time Trend\n",
      "Critical Values: -29.15 (1%), -21.60 (5%), -18.16 (10%)\n",
      "Null Hypothesis: The process contains a unit root.\n",
      "Alternative Hypothesis: The process is weakly stationary.\n"
     ]
    }
   ],
   "source": [
    "pp.test_type = 'rho'\n",
    "print(pp.summary().as_text())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## KPSS Testing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The KPSS test differs from the three previous in that the null is a stationary process and the alternative is a unit root.  \n",
    "\n",
    "Note that here the null is rejected which indicates that the series might be a unit root."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    KPSS Stationarity Test Results   \n",
      "=====================================\n",
      "Test Statistic                  0.941\n",
      "P-value                         0.003\n",
      "Lags                               23\n",
      "-------------------------------------\n",
      "\n",
      "Trend: Constant\n",
      "Critical Values: 0.74 (1%), 0.46 (5%), 0.35 (10%)\n",
      "Null Hypothesis: The process is weakly stationary.\n",
      "Alternative Hypothesis: The process contains a unit root.\n"
     ]
    }
   ],
   "source": [
    "from arch.unitroot import KPSS\n",
    "kpss = KPSS(default)\n",
    "print(kpss.summary().as_text())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Changing the trend does not alter the conclusion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    KPSS Stationarity Test Results   \n",
      "=====================================\n",
      "Test Statistic                  0.361\n",
      "P-value                         0.000\n",
      "Lags                               23\n",
      "-------------------------------------\n",
      "\n",
      "Trend: Constant and Linear Time Trend\n",
      "Critical Values: 0.22 (1%), 0.15 (5%), 0.12 (10%)\n",
      "Null Hypothesis: The process is weakly stationary.\n",
      "Alternative Hypothesis: The process contains a unit root.\n"
     ]
    }
   ],
   "source": [
    "kpss.trend = 'ct'\n",
    "print(kpss.summary().as_text())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Variance Ratio Testing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Variance ratio tests are not usually used as unit root tests, and are instead used for testing whether a financial return series is a pure random walk versus having some predictability.  This example uses the excess return on the market from Ken French's data. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           Mkt-RF         SMB         HML          RF\n",
      "count  103.000000  103.000000  103.000000  103.000000\n",
      "mean     1.139806    0.107379   -0.131068    0.020680\n",
      "std      3.542553    2.273547    2.162328    0.037397\n",
      "min     -7.890000   -4.370000   -4.500000    0.000000\n",
      "25%     -0.985000   -1.720000   -1.530000    0.000000\n",
      "50%      1.180000    0.320000   -0.290000    0.010000\n",
      "75%      3.155000    1.230000    1.015000    0.020000\n",
      "max     11.350000    5.490000    8.270000    0.160000\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import pandas_datareader as web\n",
    "try:\n",
    "    ff=web.DataReader('F-F_Research_Data_Factors', 'famafrench')\n",
    "except:\n",
    "    ff=web.DataReader('F-F_Research_Data_Factors_TXT', 'famafrench')\n",
    "ff = ff[0]\n",
    "excess_market = ff.iloc[:,0]  # Excess Market\n",
    "print(ff.describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The variance ratio compares the variance of a 1-period return to that of a multi-period return. The comparison length has to be set when initializing the test.  \n",
    "\n",
    "This example compares 1-month to 12-month returns, and the null that the series is a pure random walk is rejected. Negative values indicate some positive autocorrelation in the returns (momentum)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Variance-Ratio Test Results     \n",
      "=====================================\n",
      "Test Statistic                 -4.555\n",
      "P-value                         0.000\n",
      "Lags                               12\n",
      "-------------------------------------\n",
      "\n",
      "Computed with overlapping blocks (de-biased)\n"
     ]
    }
   ],
   "source": [
    "from arch.unitroot import VarianceRatio\n",
    "vr = VarianceRatio(excess_market, 12)\n",
    "print(vr.summary().as_text())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default the VR test uses all overlapping blocks to estimate the variance of the long period's return.  This can be changed by setting  `overlap=False`.  This lowers the power but doesn't change the conclusion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Variance-Ratio Test Results     \n",
      "=====================================\n",
      "Test Statistic                 -1.944\n",
      "P-value                         0.052\n",
      "Lags                               12\n",
      "-------------------------------------\n",
      "\n",
      "Computed with non-overlapping blocks\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\git\\arch\\arch\\unitroot\\unitroot.py:1228: InvalidLengthWarning: \n",
      "The length of y is not an exact multiple of 12, and so the final\n",
      "6 observations have been dropped.\n",
      "\n",
      "  InvalidLengthWarning)\n"
     ]
    }
   ],
   "source": [
    "warnings.simplefilter('always')  # Restore warnings\n",
    "\n",
    "vr.overlap = False\n",
    "print(vr.summary().as_text())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note**: The warning is intentional. It appears here since when it is not possible to use all data since the data length isn't an integer multiple of the long period when using non-overlapping blocks.  There is little reason to use `overlap=False`."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
