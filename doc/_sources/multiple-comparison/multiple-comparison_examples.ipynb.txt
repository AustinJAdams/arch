{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Multiple Comparisons"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_This setup code is required to run in an IPython notebook_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import warnings\n",
    "\n",
    "# Reproducability\n",
    "import numpy as np\n",
    "import seaborn\n",
    "\n",
    "warnings.simplefilter('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "seaborn.mpl.rcParams['figure.figsize'] = (10.0, 6.0)\n",
    "seaborn.mpl.rcParams['savefig.dpi'] = 90\n",
    "seaborn.mpl.rcParams['font.family'] = 'serif'\n",
    "seaborn.mpl.rcParams['font.size'] = 14\n",
    "\n",
    "np.random.seed(23456)\n",
    "# Common seed used throughout\n",
    "seed = np.random.randint(0, 2**31 - 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The multiple comparison procedures all allow for examining aspects of superior predictive ability. There are three available:\n",
    "\n",
    "* `SPA` - The test of Superior Predictive Ability, also known as the Reality Check (and accessible as `RealityCheck`) or the bootstrap data snooper, examines whether any model in a set of models can outperform a benchmark.\n",
    "* `StepM` - The stepwise multiple testing procedure uses sequential testing to determine which models are superior to a benchmark.\n",
    "* `MCS` - The model confidence set which computes the set of models which with performance indistinguishable from others in the set.\n",
    "\n",
    "All procedures take **losses** as inputs.  That is, smaller values are preferred to larger values.  This is common when evaluating forecasting models where the loss function is usually defined as a positive function of the forecast error that is increasing in the absolute error.  Leading examples are Mean Square Error (MSE) and Mean Absolute Deviation (MAD)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The test of Superior Predictive Ability (SPA)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This procedure requires a $t$-element array of benchmark losses and a $t$ by $k$-element array of model losses.  The null hypothesis is that no model is better than the benchmark, or \n",
    "\n",
    "$$ H_0: \\max_i E[L_i] \\geq E[L_{bm}] $$\n",
    "\n",
    "where $L_i$ is the loss from model $i$ and $L_{bm}$ is the loss from the benchmark model.\n",
    "\n",
    "This procedure is normally used when there are many competing forecasting models such as in the study of technical trading rules.  The example below will make use of a set of models which are all equivalently good to a benchmark model and will serve as a *size study*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Study Design"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The study will make use of a measurement error in predictors to produce a large set of correlated variables that all have equal expected MSE.  The benchmark will have identical measurement error and so all models have the same expected loss, although will have different forecasts.\n",
    "\n",
    "The first block computed the series to be forecast."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy.random import randn\n",
    "import statsmodels.api as sm\n",
    "\n",
    "t = 1000\n",
    "factors = randn(t, 3)\n",
    "beta = np.array([1, 0.5, 0.1])\n",
    "e = randn(t)\n",
    "y = factors.dot(beta)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The next block computes the benchmark factors and the model factors by contaminating the original factors with noise.  The models are estimated on the first 500 observations and predictions are made for the second 500.  Finally, losses are constructed from these predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Measurement noise\n",
    "bm_factors = factors + randn(t, 3)\n",
    "# Fit using first half, predict second half\n",
    "bm_beta = sm.OLS(y[:500], bm_factors[:500]).fit().params\n",
    "# MSE loss\n",
    "bm_losses = (y[500:] - bm_factors[500:].dot(bm_beta))**2.0\n",
    "# Number of models\n",
    "k = 500\n",
    "model_factors = np.zeros((k, t, 3))\n",
    "model_losses = np.zeros((500, k))\n",
    "for i in range(k):\n",
    "    # Add measurement noise\n",
    "    model_factors[i] = factors + randn(1000, 3)\n",
    "    # Compute regression parameters\n",
    "    model_beta = sm.OLS(y[:500], model_factors[i, :500]).fit().params\n",
    "    # Prediction and losses\n",
    "    model_losses[:, i] = (\n",
    "        y[500:] - model_factors[i, 500:].dot(model_beta))**2.0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally the SPA can be used.  The SPA requires the **losses** from the benchmark and the models as inputs.  Other inputs allow the bootstrap sued to be changed or for various options regarding studentization of the losses.  `compute` does the real work, and then `pvalues` contains the probability that the null is true given the realizations.\n",
    "\n",
    "In this case, one would not reject. The three p-values correspond to different re-centerings of the losses.  In general, the `consistent` p-value should be used.  It should always be the case that\n",
    "\n",
    "$$ lower \\leq consistent \\leq upper .$$\n",
    "\n",
    "See the original papers for more details."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "lower         0.520\n",
       "consistent    0.723\n",
       "upper         0.733\n",
       "dtype: float64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from arch.bootstrap import SPA\n",
    "\n",
    "spa = SPA(bm_losses, model_losses)\n",
    "spa.seed(seed)\n",
    "spa.compute()\n",
    "spa.pvalues"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The same blocks can be repeated to perform a simulation study.  Here I only use 100 replications since this should complete in a reasonable amount of time.  Also I set `reps=250` to limit the number of bootstrap replications in each application of the SPA (the default is a more reasonable 1000)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "10\n",
      "20\n",
      "30\n",
      "40\n",
      "50\n",
      "60\n",
      "70\n",
      "80\n",
      "90\n"
     ]
    }
   ],
   "source": [
    "# Save the pvalues\n",
    "pvalues = []\n",
    "b = 100\n",
    "seeds = np.random.randint(0, 2**31 - 1, b)\n",
    "# Repeat 100 times\n",
    "for j in range(b):\n",
    "    if j % 10 == 0:\n",
    "        print(j)\n",
    "    factors = randn(t, 3)\n",
    "    beta = np.array([1, 0.5, 0.1])\n",
    "    e = randn(t)\n",
    "    y = factors.dot(beta)\n",
    "\n",
    "    # Measurement noise\n",
    "    bm_factors = factors + randn(t, 3)\n",
    "    # Fit using first half, predict second half\n",
    "    bm_beta = sm.OLS(y[:500], bm_factors[:500]).fit().params\n",
    "    # MSE loss\n",
    "    bm_losses = (y[500:] - bm_factors[500:].dot(bm_beta))**2.0\n",
    "    # Number of models\n",
    "    k = 500\n",
    "    model_factors = np.zeros((k, t, 3))\n",
    "    model_losses = np.zeros((500, k))\n",
    "    for i in range(k):\n",
    "        model_factors[i] = factors + randn(1000, 3)\n",
    "        model_beta = sm.OLS(y[:500], model_factors[i, :500]).fit().params\n",
    "        # MSE loss\n",
    "        model_losses[:, i] = (\n",
    "            y[500:] - model_factors[i, 500:].dot(model_beta))**2.0\n",
    "    # Lower the bootstrap replications to 250\n",
    "    spa = SPA(bm_losses, model_losses, reps=250)\n",
    "    spa.seed(seeds[j])\n",
    "    spa.compute()\n",
    "    pvalues.append(spa.pvalues)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally the pvalues can be plotted.  Ideally they should form a $45^o$ line indicating the size is correct.  Both the consistent and upper perform well.  The lower has too many small p-values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "pvalues = pd.DataFrame(pvalues)\n",
    "for col in pvalues:\n",
    "    values = pvalues[col].values\n",
    "    values.sort()\n",
    "    pvalues[col] = values\n",
    "# Change the index so that the x-values are between 0 and 1\n",
    "pvalues.index = np.linspace(0.005, .995, 100)\n",
    "fig = pvalues.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Power"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The SPA also has power to reject then the null is violated.  The simulation will be modified so that the amount of measurement error differs across models, and so that some models are actually better than the benchmark.   The p-values should be small indicating rejection of the null."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "lower         0.0\n",
       "consistent    0.0\n",
       "upper         0.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of models\n",
    "k = 500\n",
    "model_factors = np.zeros((k, t, 3))\n",
    "model_losses = np.zeros((500, k))\n",
    "for i in range(k):\n",
    "    scale = ((2500.0 - i) / 2500.0)\n",
    "    model_factors[i] = factors + scale * randn(1000, 3)\n",
    "    model_beta = sm.OLS(y[:500], model_factors[i, :500]).fit().params\n",
    "    # MSE loss\n",
    "    model_losses[:, i] = (\n",
    "        y[500:] - model_factors[i, 500:].dot(model_beta))**2.0\n",
    "\n",
    "spa = SPA(bm_losses, model_losses)\n",
    "spa.seed(seed)\n",
    "spa.compute()\n",
    "spa.pvalues"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here the average losses are plotted.  The higher index models are clearly better than the lower index models -- and the benchmark model (which is identical to model.0)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAmYAAAFbCAYAAAB/IEJkAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAIABJREFUeJztnX90HlWd/9836dMmrUsDUqlGi3VZA1sjLc3yw7D2h0CBQje0CCrKqseF7zmwBypUw3fBFg9KtHJgj3pW+KpnV6lasRD5sW4U2ypbRElIWGxpXbHy4wGkQFOlCW3a3O8feSY8mcyduTNzZ+bOPO/XORr6PPPjzp37zH3P59cVUkoQQgghhJDsqcu6AYQQQgghZAwKM0IIIYQQS6AwI4QQQgixBAozQgghhBBLoDAjhBBCCLEECjNCCCGEEEugMCOEEEIIsQQKM0IIIYQQS6AwI4QQQgixhClZNyAqRx99tHznO9+ZdTMIIYQQQgLp6+t7WUo5K2i73Aqzd77znejt7c26GYQQQgghgQghntbZjq5MQgghhBBLoDAjhBBCCLEECjNCCCGEEEugMCOEEEIIsQQKM0IIIYQQS8htViYhhBCSJKOjo3juueewf//+rJtCLKdUKuEtb3kLjjjiiNjHojAjhBBCPHj55ZchhEBLSwvq6uhgIt5IKTE8PIxyuQwAscUZRxohhBDiweDgII455hiKMuKLEALTp09Hc3MzXnrppdjH42gjhBBCPDh8+DBKpVLWzSA5obGxESMjI7GPQ2FGCCGEKBBCZN0EkhNMjRXGmBWQ7v4y1vfswvODw3hbUyPWLGtBx4LmrJtFCCGEkABoMSsY3f1lXHf3EygPDkMCKA8O47q7n0B3fznrphFCCEmZs846C+3t7Vk3I3F27dqFxYsXQwiBrVu3Zt2cWFCYFYz1PbswPHJ4wmfDI4exvmdXRi0ihBCSBX/605/wi1/8Ag8//DB2796ddXMSpaWlJfeCzIHCrGA8Pzgc6nNCCCHF5Ac/+AGuueYa1NXV4Xvf+17WzSGaUJjlnO7+Mtq7NmNu5wNo79qMpuneGURva2pMuWWEEELcz+g0w0o2btyIq666CkuWLMGGDRvGPz/vvPMghEBrayvuueceAMA111yDo48+GqeccgqAsYzU6667DvPnz8fixYtxxhlnYGBgAACwb98+LF68GA0NDfjKV76CSy+9FKeeeiqEEPjjH/+IrVu3YsmSJVi8eDFOO+00fPzjH8fg4OCEtt17771oaWnBKaecgo6ODqxduxYNDQ1YvHgx9u3bBwDo7e3FokWL8L73vQ/t7e1Yu3YtDh06FKoPXnvtNVx++eVobW3FwoULce655+L3v//9+Pd/+MMfcPbZZ+P9738//v7v/x4XXXQRdu0a8zC98soruPDCC/G+970PixcvxvLly/HrX/865F0ID4VZjvGKJ3vt9UMo1U/MDGks1WPNspZsGkkIITVKljG///u//4sjjjgCxxxzDD7ykY/gySefxGOPPQYAuP/++/He974X55xzDi644AIAwJe//GUce+yxePjhhwEA69atw0MPPYRHHnkEW7duxRVXXIElS5bg1VdfxcyZM7F161bMnj0b3/3ud3HbbbfhkUcewYoVK1BXV4f/+q//wgUXXICtW7fi4YcfRqlUwqc//enxtj399NP44Ac/iC9+8Yv49a9/jW9+85u48847MXv2bGzduhUzZ87Eyy+/jDPPPBPXXnstHn74YTz44IP46U9/is9//vOh+uGyyy7D7t278dhjj6Gvrw+nnHIKzjrrLBw4cAAAcOWVV+Lkk0/GL3/5Szz00ENobGzEr371KwDADTfcgOnTp+Phhx/G1q1bsXDhQvzkJz+JfW+CoDDLCBNvUV7xZCOjEjOmTkFzUyMEgOamRty8spVZmYQQkjJZxvxu2LABH/nIRwAAq1atQkNDwwSr2aWXXoo777wThw+Pta+npwcf+MAHUF9fj+HhYdxyyy248sor0dDQAAC44IILMGXKFNx5550TznPBBRfgqKOOAgD8+Mc/xpw5c7B69WpcfvnlAMZKSFx44YUTBM3tt9+Ot7zlLVi1ahUA4Oijjx5vq8PXvvY1HHPMMTj//PMBjNUI++hHP4qvfe1r2n2we/fucXeuU4/u05/+NJ599ll8//vfBwCUy2U8++yz4/3whS98AWeeeeb4dy+++CJef/11AMBVV12Fj370o9rnjwrLZWSA8xbl/GCdtygAoQSUKm5s3/AIBtaeFb+hhBBCIpNlzO8999yD//7v/wYAzJw5E+eeey6+//3vY/369airq8Mll1yCz372s3jwwQexbNkyfOc738H1118PAPj973+P4eFhfPnLX8Y3vvGN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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "model_losses = pd.DataFrame(\n",
    "    model_losses, columns=['model.' + str(i) for i in range(k)])\n",
    "avg_model_losses = pd.DataFrame(model_losses.mean(0), columns=['Average loss'])\n",
    "fig = avg_model_losses.plot(style=['o'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stepwise Multiple Testing (StepM)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Stepwise Multiple Testing is similar to the SPA and has the same null. The primary difference is that it identifies the set of models which are better than the benchmark, rather than just asking the basic question if any model is better.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model indices:\n",
      "['106', '115', '117', '152', '156', '157', '158', '169', '186', '187', '192', '197', '214', '215', '219', '228', '235', '248', '252', '253', '254', '257', '261', '262', '263', '266', '272', '275', '279', '280', '281', '282', '286', '291', '294', '298', '299', '300', '305', '306', '310', '316', '318', '325', '326', '329', '330', '332', '335', '336', '338', '340', '341', '342', '344', '348', '349', '350', '351', '353', '354', '356', '357', '359', '360', '362', '363', '364', '365', '368', '370', '371', '372', '373', '374', '377', '378', '379', '380', '382', '383', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '398', '399', '400', '401', '402', '403', '404', '405', '406', '407', '408', '410', '411', '412', '413', '414', '417', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '447', '448', '449', '450', '451', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499']\n"
     ]
    }
   ],
   "source": [
    "from arch.bootstrap import StepM\n",
    "\n",
    "stepm = StepM(bm_losses, model_losses)\n",
    "stepm.compute()\n",
    "print('Model indices:')\n",
    "print([model.split('.')[1] for model in stepm.superior_models])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "better_models = pd.concat([model_losses.mean(0), model_losses.mean(0)], 1)\n",
    "better_models.columns = ['Same or worse', 'Better']\n",
    "better = better_models.index.isin(stepm.superior_models)\n",
    "worse = np.logical_not(better)\n",
    "better_models.loc[better, 'Same or worse'] = np.nan\n",
    "better_models.loc[worse, 'Better'] = np.nan\n",
    "fig = better_models.plot(style=['o', 's'], rot=270)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Model Confidence Set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The model confidence set takes a set of **losses** as its input and finds the set which are not statistically different from each other while controlling the familywise error rate.  The primary output is a set of p-values, where models with a pvalue above the size are in the MCS.  Small p-values indicate that the model is easily rejected from the set that includes the best.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MCS P-values\n",
      "            Pvalue\n",
      "Model name        \n",
      "model.60     0.001\n",
      "model.80     0.001\n",
      "model.140    0.001\n",
      "model.40     0.003\n",
      "model.20     0.003\n",
      "model.100    0.007\n",
      "model.120    0.010\n",
      "model.0      0.012\n",
      "model.220    0.032\n",
      "model.240    0.093\n",
      "model.160    0.096\n",
      "model.200    0.096\n",
      "model.260    0.096\n",
      "model.180    0.342\n",
      "model.320    0.450\n",
      "model.420    0.466\n",
      "model.400    0.688\n",
      "model.360    0.885\n",
      "model.340    0.885\n",
      "model.280    0.885\n",
      "model.460    0.885\n",
      "model.380    0.885\n",
      "model.300    0.885\n",
      "model.480    0.885\n",
      "model.440    1.000\n",
      "Included\n",
      "['180', '280', '300', '320', '340', '360', '380', '400', '420', '440', '460', '480']\n",
      "Excluded\n",
      "['0', '100', '120', '140', '160', '20', '200', '220', '240', '260', '40', '60', '80']\n"
     ]
    }
   ],
   "source": [
    "from arch.bootstrap import MCS\n",
    "\n",
    "# Limit the size of the set\n",
    "losses = model_losses.iloc[:, ::20]\n",
    "mcs = MCS(losses, size=0.10)\n",
    "mcs.compute()\n",
    "print('MCS P-values')\n",
    "print(mcs.pvalues)\n",
    "print('Included')\n",
    "included = mcs.included\n",
    "print([model.split('.')[1] for model in included])\n",
    "print('Excluded')\n",
    "excluded = mcs.excluded\n",
    "print([model.split('.')[1] for model in excluded])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "status = pd.DataFrame([losses.mean(0), losses.mean(0)],\n",
    "                      index=['Excluded', 'Included']).T\n",
    "status.loc[status.index.isin(included), 'Excluded'] = np.nan\n",
    "status.loc[status.index.isin(excluded), 'Included'] = np.nan\n",
    "fig = status.plot(style=['o', 's'])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
